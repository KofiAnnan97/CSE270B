;------------------------------------------------
;
; untitled
; Atari VCS Game 
; Created by Brinkman, Bo Dr. on 2014-01-09.
;
; Copyright (c) 2014 __MyCompanyName__. All rights reserved.
;
; Use with paddle controllers
;
;------------------------------------------------
	processor 	6502
	include 	vcs.h
	include 	macro.h

;------------------------------------------------
; Constants
;------------------------------------------------
BLACK = #$00

;------------------------------------------------
; RAM
;------------------------------------------------
    SEG.U   variables
    ORG     $80

bgcolor		.byte
paddle0		.byte

;------------------------------------------------
; Start of ROM
;------------------------------------------------
	SEG   Bank0
	ORG   $F000       	; 4k ROM start point

Start 
	CLEAN_START			; Clear RAM and Registers
	lda		#$0
	sta		AUDV0
	sta		AUDV1
	lda		#$1
	sta		AUDC0
	sta		AUDF0
	
;------------------------------------------------
; Vertical Blank
;------------------------------------------------
MainLoop
	lda		#%00000000 ;Capactor starts collecting charge
	sta		VBLANK
	VERTICAL_SYNC
    lda     #43
    sta     TIM64T

	;***** Vertical Blank code goes here
	lda		#0
	sta		bgcolor
	
	;paddle0 could be as big as 193. Need to make sure it
	; is between 0 and 31 for the AUDV0, so divide by 16
	lda		paddle0
	lsr ;divide by 2
	lsr
	lsr
	lsr
	sta		AUDV0
	
.waitForVBlank
	lda		INTIM
	bne		.waitForVBlank
	sta		WSYNC

;------------------------------------------------
; Kernel
;------------------------------------------------	
DrawScreen
	ldx		#192+1		; Kernel goes here
.scanline
	lda		bgcolor
	sta		COLUBK
	inc		bgcolor
		
	;Check to see if paddle capacitor is full yet
	lda		INPT0
	bmi		.nosave
	;If not, store the current scanline number in paddle0
	stx		paddle0
.nosave
	dex
	sta		WSYNC
	bne		.scanline
;paddle0 variable now contains a number, which is the scanline on which
; the paddle capacitor got full

;------------------------------------------------
; Overscan
;------------------------------------------------
	lda		#%10000010
	sta		VBLANK
    lda		#36
    sta		TIM64T

	;***** Overscan Code goes here

.waitForOverscan
	lda     INTIM
	bne     .waitForOverscan

	jmp		MainLoop

;------------------------------------------------
; ROM Tables
;------------------------------------------------
	;***** ROM tables go here

;------------------------------------------------
; Interrupt Vectors
;------------------------------------------------
	echo [*-$F000]d, " ROM bytes used"
	ORG    $FFFA
	.word  Start         ; NMI
	.word  Start         ; RESET
	.word  Start         ; IRQ
    
	END